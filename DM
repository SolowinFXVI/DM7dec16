                  SOLITAIRE

Note : Pour la durée de l'exercice les tableaux débutent a la case 1.
Note : Pour la durée de l'exercice la lecture hors du tableau n'entrainera pas d'erreure fatale
et renvera simplement une réponse négative, les tests continuerons indépendement.

1)
Pour stocker l'état du plateau de solitaire on va utiliser un tableau a double
entrées qui représentera le plateau, il servira a stocker l'état des cases et
donc du plateau dans son intégralitée.
La taille du tableau dépendra du type de solitaire (wikipedia), on utilisera un
modele européen à 37 trous pour cet exercice.


struct SOLITAIRE(){
  int PLATEAU[7][7];  //le tabelau est de type int car on stockera l'état des cases avec des entiers
};


////////////////////////////////////////////////////////////////////////////////
Etat des cases:

      -1 : la case n'est pas une case (le solitaire européen n'est pas un carré,
      contrairement a notre représentation il faut donc attribuer les cases qui
      ne seront pas utilisées).

      0 : la case est vise.

      1 : il y a un pion dans la case.
////////////////////////////////////////////////////////////////////////////////

Pour représenter un pion on va simplement lui attribuer des coordonnées du plateau.

struct POS(){
  int x;
  int y;
};


2)
Pour savoir si le mouvement d'un pion p1 a un pion p2 est possible (selon les règles du solitaire) il faut tester plusieurs choses.
p1 et p2 doivent tenir dans s (leurs cooredonnées ne peuvent pas etre inférieures a 1  ni supéreieures a 7)

p1 et p2 sont ils dans la zone jouable?
p1 est il un pion?
p2 est une case vide?
p2 est il suffisement proche de p1? (a une case d'écart)


BOOL mouvement_test (SOLITAIRE s, POS p1, POS p2){

//p1 et p2 sont ils dans la zone jouable.
  if( (s[p1.x][p1.y] == -1) && (s[p2.x][p2.y] == -1)){
  return false;
  }

//p1 est un pion?
  if( s[p1.x][p1.y] != 1){
  return false;
  }

//p2 pret a recevoir p1?
  if( s[p2.x][p2.y] != 0){
  return false;
  }

//vérifcation de la condition de distance (doit remplir une des conditions suivantes)
  if( s[p2.x][p2.y] != (s[p1.x+2][p1.y] || s[p1.x][p1.y+2] || s[p1.x-2][p1.y] || s[p1.x][p1.y-2]) ){
  return false
  }
//dans tous les autres cas
return true;
}
 La complexitée de cet alogorithme est dans le pire des cas de 4, puisque le pire des cas est le cas ou
 le mouvement est possible les 4 test sont alors éxécutés, la complexitée vaut alors 4.

3)
Pour qu'il y ai un déplacement possible de pion sur s il faut qu'il y ai une case vide et qu'a deux cases de
distance il y ai un pion.
On va donc chercher une case vide et ensuite tester si il y un pion qui rempli les bonnes conditions.

BOOL deplacement_possible(SOLITAIRE s){

  int i,j;
  for(i=1; i < 7; i++){
      for(j=1; j < 7; j++){
        if( (s[i][j] == 0) && (s[i+2][j] == 1 || s[i][j+2] == 1 || s[i-2][j] == 1|| s[i][j-2] == 1))
        return true; //les conditions sont remplies, un deplacement est possible
      }
  }
  return false; //les conditions ne sont pas remplies, pas de déplacement.
}

La complexité de cet algorithme est directement liée a la taille des doubles boucles imbriquées; elles sont de tailles 7.
ce qui nous donne 7*7 = 7^2=49. Si on remplace 7 par n en fonction des différents types de solitaires ont obtient une complexitée en O(n^2).


4)
On peut fortement s'inspirer de l'algorithme précédent pour cette question.

SOLITAIRE jouer_tant_qu_on_peut_encore (SOLITARE s){    //l'algorithme prends en argument un solitaire et renvoi un solitaire modifié.

int i, j;
int un_mouvement_a_ete_effectue=1; //pour savoir quand s'arreter
POS p1, p2;


while(un_mouvement_a_ete_effectue == 1){ //l'alogrithme doit s'arreter lorsqu'a la complétion des boucles aucun mouvement n'a ete effectue.

  for(i=1; i < 7; i++){
      for(j=1; j < 7; j++){
        if( (s[i][j] == 0) && (s[i+2][j] == 1 || s[i][j+2] == 1 || s[i-2][j] == 1|| s[i][j-2] == 1)){
        p1.x = i; p1.y = j;

          if(s[i+2][j] == 1){
            p2.x= i+2; p2.y = j;
            effectuer_mouvement(p1, p2);
            un_mouvement_a_ete_effectue=1;
            }

          else if(s[i][j+2] == 1){
            p2.x= i; p2.y = j+2;
            effectuer_mouvement(p1, p2);
            un_mouvement_a_ete_effectue=1;
            }

          else if(s[i-2][j] == 1){
            p2.x= i-2; p2.y = j;
            effectuer_mouvement(p1, p2);
            un_mouvement_a_ete_effectue=1;
            }

          else if(s[i][j-2] == 1){
            p2.x= i; p2.y = j-2;
            effectuer_mouvement(p1, p2);
            un_mouvement_a_ete_effectue=1;
            }
         }
      }
    }
  }
}


La complexitée de cet algorithme est bien plus difficile a évaluer: Les deux boucles internes ont toujours
la meme complexitée qu'a la question précédente. Mais le while est difficile a evaluer.
Dans le pire des cas le while s'effectura le nombre de cases qu'il y a sur le plateau, déffinissons par n le nombre de cases.


si n est le nombre de cases alors la double boucle intérieure a une complexitée de n, le while également.
ce qui donnne n*n=n^2. La complextiée de cet algorithme pour n vallant le nombre de case est de l'ordre de O(n^2).


Cependant si on prend n la largeur des tableaux (comme a la question précédente) la complexitée de cet
algorithme est alors de n*n*n*n = n^4. O(n^4).



5)
Pour représenter l'ensemble des parties de solitaire possible on peut utiliser un arbre des possibilités.
Il duffit alors de suivre l'arbre de la racine jusqu'aux feuilles les branches représentants différents mouvements possibles.
La feuille de l'arbre qu'on a suivi donnerait le nombre minimal de pions restants sur le plateau.
